<template>
  
  <div class="page" data-name="home">

    <!-- Toolbar-->
    <div class="toolbar toolbar-top">
      <div class="toolbar-inner">
        <div class="button" >
          <a href="#" @click=${bDay} >
            back
          </a>
        </div>
        <div class="title-large">
          <div class="title-large-text">${global.getDate()}</div>
        </div>
        <div class="button">
          <a href="#" @click=${nDay} >
            For
          </a>
        </div>
      </div>
    </div>
    <!-- Top Navbar -->
    <div class="navbar navbar-large">
      <div class="navbar-inner">
        <div class="title-large">
          <div class="title-large-text">Lunchbox</div>
        </div>
      </div>
    </div>


    <!-- Scrollable page content-->
    <div class="page-content">
      <div class="block block-strong"> 
        <p>${loc}</p>       
        <div class="list accordion-opposite">
          <ul id="foodlist">
            ${providers.map((provider) => $h`
              <li class="accordion-item accordion-item-opened">
                <a href="" class="item-link item-content">
                  <div class="item-inner">
                    <div class="item-title text-color-primary" >${provider.pp.name}</div>
                  </div>
                </a>
                <div class="accordion-item-content">
                  <div class="list">
                    <ul>
                      ${provider.oo.map((meal) => $h`
                        <li>
                          <a href=${detail + meal.id} class="item-link item-content">
                            <!--div class="item-media"><i class="icon icon-f7"></i></div-->
                            <div class="item-inner">
                              <div class="item-title">
                                <div class="item-header">${meal.tags}</div>
                                ${meal.name + " " + meal.description }

                                <div class= "item-footer">
                                  ${Array(ratingToStars(meal.averageRating)["filledStars"]).fill(undefined).map((u,i) => $h`
                                    <i class="f7-icons" style="font-size: 18px; color: #FFE900;">star_fill</i>
                                    `)}
                                  ${Array(ratingToStars(meal.averageRating)["halfFilledStars"]).fill(undefined).map((u,i) => $h`
                                    <i class="f7-icons" style="font-size: 18px; color: #FFE900;">star_lefthalf_fill</i>
                                    `)}
                                  ${Array(ratingToStars(meal.averageRating)["emptyStars"]).fill(undefined).map((u,i) => $h`
                                    <i class="f7-icons" style="font-size: 18px; color: #FFE900;">star</i>
                                  `)}

                                </div>
                                <!-- for dev only -->
                                ${"\tid: " + meal.id}
                                <!-- for dev only --> 
                              </div>
                              <div class="item-after">${priceView(meal.price)}</div>
                            </div>
                          </a>
                        </li>
                      `)}
                    </ul>
                  </div>
                </div>
              </li>
            `)}
          </ul>
        </div>

      </div>

      <div class="block-title">Bottom</div>
      <div class="list">
        <ul>
          <li>
            <a href="/about/" class="item-content item-link">
              <div class="item-inner">
                <div class="item-title">Settings & About</div>
              </div>
            </a>
          </li>
          <li>
            <a href="/form/" class="item-content item-link">
              <div class="item-inner">
                <div class="item-title">Form</div>
              </div>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
</template>

<script>
  import global from '../js/globals.js';

  export default async (props, { $update }) => {
    //example data:
    //will be replaced by a databaseconnection
    global.initLocation();
    global.initOffers();
    global.initProviders();

    var detail = "/detail/";
    var loc = global.getLocation();
    var meals = global.getOffers();
    var providerlist = global.getProviders();
    let providers = global.organizeOffers(meals, providerlist);
    console.log(providers);
    global.setLocation("Neubrandenburg"); 

    //Date function for header
    var thisdate = global.getDate();
    //function to change data with date missing
    //event for next/back missing
    var nDay = async () => {
      global.increaseDate();
      thisdate = global.getDate();
      //await global.initOffers(thisdate.getFullYear().toString() + "-" + (thisdate.getMonth() + 1).toString() + "-" + thisdate.getDate().toString());
      meals = global.getOffers([global.getLocation()]);
      console.log(meals);
      providerlist = global.getProviders();
      console.log(providerlist);
      providers = global.organizeOffers(meals, providerlist);
      console.log(providers);
      $update();
    }

    function priceView(rn){
      if(rn == null){
        return "";
      }
      return (rn/100).toFixed(2) + ' â‚¬';
    }

    var bDay = async () => {
      global.decreaseDate();
      thisdate = global.getDate();
      //await global.initOffers(date.getFullYear().toString() + "-" + (date.getMonth() + 1).toString() + "-" + date.getDate().toString());
      meals = global.getOffers([global.getLocation()]);
      providerlist = global.getProviders();
      providers = global.organizeOffers(meals, providerlist);
      $update();
    }


    const ratingToStars = (rating) => {
      let filledStars = 0;
      let halfFilledStars = 0;
      let emptyStars =0;

      if (rating == null){
        return {"filledStars" : filledStars,"halfFilledStars": halfFilledStars,"emptyStars":emptyStars};
      }else{
        rating = Math.round(2*rating)/2;

        filledStars = parseInt(rating);
        if(rating - filledStars == 0.5){
          halfFilledStars = 1
        }
        emptyStars = 5- filledStars-halfFilledStars;
      }
      console.log ({"filledStars" : filledStars,"halfFilledStars": halfFilledStars,"emptyStars":emptyStars});
      return {"filledStars" : filledStars,"halfFilledStars": halfFilledStars,"emptyStars":emptyStars};
    }

    return $render;
    
  }
</script>
