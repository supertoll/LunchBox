<template>
  <div class="page" data-name="home">

    <!-- Toolbar-->
    <div class="toolbar toolbar-top">
      <div class="toolbar-inner">
        <div class="button" >
          <a href="#" @click=${bDay} >
            back
          </a>
        </div>
        <div class="title-large">
          <div class="title-large-text">${thisdate}</div>
        </div>
        <div class="button">
          <a href="#" @click=${nDay} >
            For
          </a>
        </div>
      </div>
    </div>
    <!-- Top Navbar -->
    <div class="navbar navbar-large">
      <div class="navbar-inner">
        <div class="title-large">
          <div class="title-large-text">Lunchbox</div>
        </div>
      </div>
    </div>


    <!-- Scrollable page content-->
    <div class="page-content">
      <div class="block block-strong"> 
        <p>${loc}</p>       
        <div class="list accordion-opposite">
          <ul id="foodlist">
            ${providers.map((provider) => $h`
              <li class="accordion-item accordion-item-opened">
                <a href="" class="item-link item-content">
                  <div class="item-inner">
                    <div class="item-title text-color-primary" >${provider.pp.name}</div>
                  </div>
                </a>
                <div class="accordion-item-content">
                  <div class="list">
                    <ul>
                      ${provider.oo.map((meal) => $h`
                        <li>
                          <a href=${detail + meal.id} class="item-link item-content">
                            <!--div class="item-media"><i class="icon icon-f7"></i></div-->
                            <div class="item-inner">
                              <div class="item-title">
                                <div class="item-header">${meal.tags}</div>
                                ${meal.name + " " + meal.description} 
                                <div class="item-footer">${ratingToStars(meal.averageRating)}</div>
                              </div>
                              <div class="item-after">${priceView(meal.price)}</div>
                            </div>
                          </a>
                        </li>
                      `)}
                    </ul>
                  </div>
                </div>
              </li>
            `)}
          </ul>
        </div>

      </div>

      <div class="block-title">Bottom</div>
      <div class="list">
        <ul>
          <li>
            <a href="/about/" class="item-content item-link">
              <div class="item-inner">
                <div class="item-title">Settings & About</div>
              </div>
            </a>
          </li>
          <li>
            <a href="/form/" class="item-content item-link">
              <div class="item-inner">
                <div class="item-title">Form</div>
              </div>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
</template>
<script>
import global from '../js/globals.js';
export default async (props, { $update }) => {
  //example data:
  //will be replaced by a databaseconnection
  let detail = "/detail/";
  let loc = global.getLocation()
  let meals = global.getOffers();
  let providerlist = global.getProviders();
  let providers = global.organizeOffers(meals, providerlist);
  //Date function for header
  let date = new Date();
  let thisdate = date.getDate().toString() + "." + (date.getMonth() + 1).toString() + "." + date.getFullYear().toString();
  //function to change data with date missing
  //event for next/back missing
  var nDay = async () => {
    date.setDate(date.getDate()+1);
    thisdate = date.getDate().toString() + "." + (date.getMonth() + 1).toString() + "." + date.getFullYear().toString();
    await global.initOffers(date.getFullYear().toString() + "-" + (date.getMonth() + 1).toString() + "-" + date.getDate().toString());
    meals = global.getOffers();
    providerlist = global.getProviders();
    providers = global.organizeOffers(meals, providerlist);
    nsole.log(1);
    $update();
  }

  function priceView(rn){
    if(rn == null){
      return "";
    }
    let r = rn.toString();
    return r[0] + '.' + r[1] + r[2] + ' â‚¬';
  }

  var bDay = async () => {
    date.setDate(date.getDate()-1);
    if(date < new Date()){
      date = new Date();
    }
    else{
      await global.initOffers(date.getFullYear().toString() + "-" + (date.getMonth() + 1).toString() + "-" + date.getDate().toString());
      meals = global.getOffers();
      providerlist = global.getProviders();
      providers = global.organizeOffers(meals, providerlist);
    }
    thisdate = date.getDate().toString() + "." + (date.getMonth() + 1).toString() + "." + date.getFullYear().toString();
    console.log(2);
    $update();
  }
  const ratingToStars = (r) => {
    let result = "";
    result += "#".repeat(Math.trunc(r));
    if(r % 1 != 0){
      result += "+";
    }
    result += "o".repeat(5- result.length);
    return result;

  }

  return $render;
}
</script>